# fuka/runner.py
from __future__ import annotations
import argparse
import json
import os
from pathlib import Path
from datetime import datetime, timezone
from typing import Any, Dict, Optional

# NOTE:
# - This runner is the single blessed entrypoint for headless jobs.
# - It reads a JSON config, prepares data/runs/<RUN_ID>, writes run_meta.json,
#   and invokes fuka.engine.Engine with deterministic settings.
#
# Canonical pipeline (Master Plan v2):
#   python -m fuka.runner --config configs/smoke.json --data_root data --run_id <ID> [--prefix HTTPS]
#
# Outputs:
#   data/runs/<RUN_ID>/shards/*.parquet
#   data/runs/<RUN_ID>/run_meta.json

ISO = "%Y-%m-%dT%H:%M:%SZ"


def _utc_now() -> str:
    return datetime.now(timezone.utc).strftime(ISO)


def _load_config(cfg_path: str) -> Dict[str, Any]:
    p = Path(cfg_path)
    if not p.is_file():
        raise FileNotFoundError(f"[runner] Config not found: {cfg_path}")
    with p.open("r", encoding="utf-8") as f:
        obj = json.load(f)
    if not isinstance(obj, dict):
        raise ValueError("[runner] Config must be a JSON object")
    return obj


def _ensure_run_id(run_id: Optional[str]) -> str:
    if run_id and run_id.strip():
        return run_id.strip()
    return f"FUKA_{datetime.now(timezone.utc).strftime('%Y%m%dT%H%M%SZ')}"


def _write_run_meta(run_dir: Path, cfg: Dict[str, Any], run_id: str, prefix: str) -> None:
    meta = {
        "run_id": run_id,
        "created_at": _utc_now(),
        "config_snapshot": cfg,
        "data_url_prefix": prefix,
        "version": "4.0-master-plan-v2",
    }
    (run_dir / "run_meta.json").write_text(json.dumps(meta, indent=2), encoding="utf-8")


def run(config: str, data_root: str, run_id: Optional[str] = None, prefix: str = "") -> str:
    """
    Headless entrypoint used by scripts and UI.

    Returns the resolved run_id.
    """
    cfg = _load_config(config)
    rid = _ensure_run_id(run_id)

    data_root_p = Path(data_root)
    run_dir = data_root_p / "runs" / rid
    shards_dir = run_dir / "shards"
    shards_dir.mkdir(parents=True, exist_ok=True)

    _write_run_meta(run_dir, cfg, rid, prefix)

    # Defer import to avoid circulars and to ensure this file is usable even if other code is missing.
    try:
        from .engine import Engine  # type: ignore
    except Exception as e:
        raise RuntimeError(
            "[runner] Could not import fuka.engine.Engine. "
            "Make sure fuka/engine.py matches Master Plan v2."
        ) from e

    # Seed & steps defaults (deterministic small → scalable)
    run_cfg = cfg.get("run", {})
    steps = int(run_cfg.get("steps", 100))
    seed = int(run_cfg.get("seed", 42))

    world_cfg = cfg.get("world", {})
    grid = world_cfg.get("grid_shape", [16, 16, 16])
    if not (isinstance(grid, (list, tuple)) and len(grid) == 3):
        raise ValueError("[runner] world.grid_shape must be a list of 3 ints")

    # Optional physics params pass-through
    physics_cfg = cfg.get("physics", {})

    # Build and execute the engine
    engine = Engine(
        data_root=str(data_root_p),
        run_id=rid,
        steps=steps,
        seed=seed,
        grid_shape=tuple(int(x) for x in grid),
        physics_cfg=physics_cfg,
        url_prefix=prefix or "",
    )
    engine.run()  # ← writes shards/*.parquet deterministically

    return rid


def _parse_args() -> argparse.Namespace:
    ap = argparse.ArgumentParser(description="Fuka 4.0 headless runner (Master Plan v2)")
    ap.add_argument("--config", required=True, help="Path to JSON config (e.g., configs/smoke.json)")
    ap.add_argument("--data_root", default="data", help="Data root directory (default: data)")
    ap.add_argument("--run_id", default="", help="Optional run_id; autogenerated if empty")
    ap.add_argument("--prefix", default=os.environ.get("DATA_URL_PREFIX", ""), help="Public HTTPS prefix for indices/packer")
    return ap.parse_args()


def main() -> None:
    args = _parse_args()
    rid = run(
        config=args.config,
        data_root=args.data_root,
        run_id=(args.run_id or None),
        prefix=args.prefix or "",
    )
    print(f"[runner] Done. Data under: {Path(args.data_root) / 'runs' / rid}")


if __name__ == "__main__":
    main()